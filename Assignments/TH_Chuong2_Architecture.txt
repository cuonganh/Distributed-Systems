Mã lớp: 114175
Mã HP: IT4610

Câu hỏi thực hành:

1. Kiến trức Microservices:

	Câu 1:
	Thực hiện gõ lệnh tương tự như hướng dẫn với 3 dịch vụ còn lại.

	Câu 2:
	Sau khi thực hiện, trên docker hub repository có 4 repository được push:
	- catalog
	- customer
	- order
	- microservice-kubernetes-demo-apache

	Câu 3: 
	>kubectl get all
	- Trạng thái của các pods vừa mới được tạo là ContainerCreating.
	- Sau vài phút gõ lại lệnh, trạng thái các pods chuyển thành Running.




2. Kiến trúc JMS và DDS:

	1. Giải thích vai trò của application server glassfish.
	- Glassfish server là một Webserver, cho phép triển khai các ứng dụng web viết bằng Java lên đó.
	- Glassfish server cho phép quản lý, cấu hình nhanh và linh hoạt.

	2. Tại sao phải tạo 2 JNDI là myTopicConnectionFactory và myTopic?



	3. Cơ chế chuyền và nhận thông điệp của Sender và Receiver:

	+---------------------------------------+-----------------------------------------------+
	| 		Sender:			|		Receiver			|
	|---------------------------------------+-----------------------------------------------|
	|	1. Create and start connection	|1. Create and start connection			|
	|	2. create queue session		|2. Create topic session			|
	|	3. get the Topic object		|3. Get the Topic object			|
	|	4. create TopicPublisher object	|4. Create TopicSubscriber			|
	|	5. create TextMessage object	|5. Create listener object			|
	|	6. write message		|6. Register the listener object with subscriber|
	|	7. send message			|						|
	|	8. connection close		|						|
	+---------------------------------------+-----------------------------------------------+	

	4. So sánh JMS và DDS Decentralized					

	+-------------------------------------------------------+-------------------------------------------------------+
	|			JMS:				|			DDS				|
	|-------------------------------------------------------+-------------------------------------------------------|
	|- Java Messaging Service				|- Data distributed service				|
	|- Java Mesage Oriented Middleware API			|- Decentralized					|
	|- Used for sending message between two or more clients	|- DDS is networking middleware	that simplifies complex	|
	|  							|  network programming 					|
	|- Centrailized						|- It implements a publish/subscribe model for sending	|
	|- Allows the communication between different components|  and receiving date, events and commands among the nodes
	|  of a distributed application				|- Automatically handles all aspects of message delivery|
	|- Most commenly used					|							| 
	|- Many implementations: ActiveMQ, GlassFish, RabbitMQ	|- Automatically handles hot-swapping redundant publishers
	|  							|  if the primary fails					|
	+-------------------------------------------------------+-------------------------------------------------------+
